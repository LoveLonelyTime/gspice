class Subckt:
    def __init__(self, name, ports, subcircuit):
        self.name = name
        self.ports = ports
        self.subcircuit = subcircuit

    def gen(self):
        return f"X{self.name} {' '.join([port[1] for port in self.ports])} {self.subcircuit}"


class Spice:
    def __init__(self):
        self.subcircuits = {}
        self.netlist_stack = [[]]
        self.namespace_stack = []
        self.annotations = []
        self.unamed_cnt = 0

    def push_netlist(self, netlist):
        self.netlist_stack.append(netlist)

    def pop_netlist(self):
        self.netlist_stack.pop()

    def get_top_netlist(self):
        return self.netlist_stack[-1]

    def push_namespace(self, namespace):
        self.namespace_stack.append(namespace)

    def pop_namespace(self):
        self.namespace_stack.pop()

    def get_namespace(self):
        return self.namespace_stack[-1]

    def push_unamed(self):
        self.push_namespace(f"unamed{self.unamed_cnt}")
        self.unamed_cnt += 1

    def create_subcircuit(self, name, ports):
        subcircuit = {"ports": ports, "netlist": []}
        self.subcircuits[name] = subcircuit
        self.push_netlist(subcircuit["netlist"])

    def put_cell(self, cell):
        self.get_top_netlist().append(cell)

    def add_annotation(self, annotation):
        self.annotations.append(annotation)

    def gen(self):
        result = "* Generated by GSpice."
        result += "\n"
        result += "\n".join([cell.gen() for cell in self.netlist_stack[0]])
        result += "\n"
        for (name, subcircuit) in self.subcircuits.items():
            result += f".subckt {name} {' '.join(subcircuit['ports'])}"
            result += "\n"
            result += "\n".join([cell.gen() for cell in subcircuit["netlist"]])
            result += "\n"
            result += ".ends"
            result += "\n"

        result += "\n".join([annotation for annotation in self.annotations])
        result += "\n"
        result += ".end"
        result += "\n"
        return result


gSpice = Spice()


def wire(name):
    return name


gnd = wire("0")


def construct_subckt_name(func, params, values):
    plist = "&".join([f"{param}-{values[param]}" for param in params])
    return f"{func.__name__}?{plist}" if len(params) > 0 else f"{func.__name__}"


def cell(func):
    def call_cell(*args, **kwargs):
        if "name" in kwargs:
            gSpice.push_namespace(kwargs["name"])
            del kwargs["name"]
        else:
            gSpice.push_unamed()
        func(*args, **kwargs)
        gSpice.pop_namespace()
    return call_cell


def subckt(params=[]):
    def inner_subckt(func):
        @cell
        def call_subckt(*args, **kwargs):
            # Built port name
            ports = []
            for pname in kwargs.keys():
                if not pname in params:
                    ports.append((pname, kwargs[pname]))
                    kwargs[pname] = wire(pname)

            # Create subckt
            sname = construct_subckt_name(func, params, kwargs)
            if not sname in gSpice.subcircuits:
                gSpice.create_subcircuit(sname, [port[0] for port in ports])
                func(*args, **kwargs)
                gSpice.pop_netlist()

            # Instantiate
            gSpice.put_cell(Subckt(gSpice.get_namespace(), ports, sname))
        return call_subckt
    return inner_subckt
